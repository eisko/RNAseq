library(ggplot2)
all_gexprT <- t(all_gexpr)
all_gexpr <- read.csv("all_gexpr.tsv", sep = "\t")
all_gexprT <- t(all_gexpr)
all_gexprT
all_gexprDF <- as.data.frame(t(all_gexpr))
all_gexprDF
all_gexpr
ensemblIDs <- read.csv("EnsemblIDs.csv")
conversionList <- load("conversionList.Rda")
ensemblIDs
View(ensemblIDs)
ensemblIDs <- read.csv("EnsemblIDs.csv", header = FALSE)
load("~/code/qPCR_FPKM/conversionList.Rda")
conversionList <- load("~/code/qPCR_FPKM/conversionList.Rda")
load("~/code/qPCR_FPKM/conversionList.Rda")
View(conversionList)
labeledDF <- left_join(all_gexpr, conversionList, by = c("X.NAME", "ensembl_gene_id"))
View(all_gexpr)
?left_join
labeledDF <- left_join(all_gexpr, conversionList, by = c("X.NAME" = "ensembl_gene_id"))
labeledDF
relabeledDF <- labeledDF %>% select(external_gene_name, everything())
relabeledDF
str(labeledDF)
labeledDF[,1] <- labeledDf[,26]
labeledDF[,1] <- labeledDF[,26]
labeledDF
relabeledDF <- labeledDF[4:, 1:26]
relabeledDF <- labeledDF[4::, 1:26]
length(relabeledDF)
nrow(labeledDF)
relabeledDF <- labeledDF[4:nrow(labeledDF), 1:26]
relabeledDF
relabeledDF <- labeledDF %>% slice(4:nrow(labeledDF))
relabeledDF
relabeledDF <- labeledDF %>% slice(4:nrow(labeledDF)) %>% select(-external_gene_name)
relabeledDF
relabeledDF <- labeledDF %>% select(external_gene_name, everything())
View(relabeledDF)
relabeledDF <- labeledDF %>% select(external_gene_name, -X.NAME, everything())
View(relabeledDF)
load("~/code/qPCR_FPKM/conversionList.Rda") # Loads dataframe called conversionList
labeledDF <- left_join(all_gexpr, conversionList, by = c("X.NAME" = "ensembl_gene_id"))
relabeledDF <- labeledDF %>% select(external_gene_name, everything()) %>% select(-X.NAME)
rerelabeledDF <- relabeledDF %>% slice(4:nrow(labeledDF))
rerelabeledDF
load("~/code/qPCR_FPKM/conversionList.Rda") # Loads dataframe called conversionList
labeledDF <- left_join(all_gexpr, conversionList, by = c("X.NAME" = "ensembl_gene_id"))
relabeledDF <- labeledDF %>% select(external_gene_name, everything()) %>% select(-X.NAME) %>% slice(4:nrow(labeledDF))
relabeledDF
View(labeledDF)
# transpose data frames
TDF <- relabeledDF %>% gather(newrows, valname, -external_gene_name) %>% spread(external_gene_name, valname)
load("~/code/qPCR_FPKM/conversionList.Rda") # Loads dataframe called conversionList
labeledDF <- left_join(all_gexpr, conversionList, by = c("X.NAME" = "ensembl_gene_id"))
relabeledDF <- labeledDF %>% select(external_gene_name, everything()) %>% slice(4:nrow(labeledDF))
relabeledDF
View(relabeledDF)
?filter
gois <- c("Nnmt", "Nampt", "Nmnat1")
gois_FPKM <- relabeledDF %>% filter(external_gene_name %in% gois)
gois_FPKM
gois <- c("Nnmt", "Nampt", "Nmnat1")
gois_FPKM <- relabeledDF %>% filter(external_gene_name %in% gois)
gois_FPKM
# following only works if no repeats in genes
gois_FPKM_T <- gois_FPKM %>% select(-X.NAME) %>%
gather(newrows, valname, -external_gene_name) %>%
spread(external_gene_name, valname)
gois <- c("Nnmt", "Nampt", "Nmnat1")
gois_FPKM <- relabeledDF %>% filter(external_gene_name %in% gois)
gois_FPKM
# following only works if no repeats in genes
gois_FPKM_T <- gois_FPKM %>% select(-X.NAME) %>%
gather(newrows, valname, -external_gene_name) %>%
spread(external_gene_name, valname)
gois_FPKM_T
gois <- c("Nnmt", "Nampt", "Nmnat1")
gois_FPKM <- relabeledDF %>% filter(external_gene_name %in% gois)
gois_FPKM
# following only works if no repeats in genes
gois_FPKM_T <- gois_FPKM %>% select(-X.NAME) %>%
gather(sample_id, valname, -external_gene_name) %>%
spread(external_gene_name, valname)
gois_FPKM_T
pdata <- read.csv("Vanc_pdata.csv")
pdata
pdata <- read.csv("Vanc_pdata.csv")
labeled_gois_FPKM <- left_join(gois_FPKM_T, pdata, by = "sample_id")
labeled_gois_FPKM
prismNnmt <- read.csv("prismNnmt.csv")
View(prismNnmt)
# set working directory
setwd("~/code/RnaSeq/ballgown")
# Make sure to necessary packages are installed
library(ballgown)
library(genefilter)
library(dplyr)
library(devtools)
#load bg object
# see "load_bg.R" for making of ballgown (bg) object and subsets of bg object
# ballgown object of all data is loaded as bg
load("Vanc_bg.rda")
# set working directory
setwd("~/code/RnaSeq/ballgown")
## write out tables of ALL gene expression
bg_unfilt_table = gexpr(bg)
write.table(bg_unfilt_table, "all_gexpr_unfiltered.tsv", sep = "\t", quote = FALSE)
all_gexpr <- read.csv("all_gexpr_unfiltered.tsv", sep = "\t")
all_gexpr
View(bg_unfilt_table)
all_gexpr <- read.csv("all_gexpr_unfiltered.tsv", sep = "\t")
all_gexpr
# label gene names for each ensebl Ids to make sorting easier
load("~/code/qPCR_FPKM/conversionList.Rda") # Loads dataframe called conversionList
labeledDF <- left_join(all_gexpr, conversionList, by = c("X.NAME" = "ensembl_gene_id"))
View(all_gexpr)
setwd("~/code/qPCR_FPKM")
setwd("~/code/qPCR_FPKM")
all_gexpr <- tibble::rownames_to_column(all_gexpr, var = "ensembl_id")
all_gexpr
# label gene names for each ensebl Ids to make sorting easier
load("~/code/qPCR_FPKM/conversionList.Rda") # Loads dataframe called conversionList
labeledDF <- left_join(all_gexpr, conversionList, by = c("ensembl_id" = "ensembl_gene_id"))
relabeledDF <- labeledDF %>% select(external_gene_name, everything()) %>% slice(4:nrow(labeledDF))
relabeledDF
# label gene names for each ensebl Ids to make sorting easier
load("~/code/qPCR_FPKM/FullconversionList.Rda") # Loads dataframe called conversionList
labeledDF <- left_join(all_gexpr, conversionList, by = c("ensembl_id" = "ensembl_gene_id"))
relabeledDF <- labeledDF %>% select(external_gene_name, everything()) %>% slice(4:nrow(labeledDF))
relabeledDF
View(relabeledDF)
library(biomaRt)
# want to use: mmusculus_gene_ensembl
ensembl = useMart("ensembl",dataset="mmusculus_gene_ensembl")
# full conversion list (with every gene)
FullConversionList <- getBM(attributes = c("ensembl_gene_id", "external_gene_name"),
mart = ensembl)
#save as object
save(FullConversionList, file = "FullConversionList.Rda")
# label gene names for each ensebl Ids to make sorting easier
load("~/code/qPCR_FPKM/FullconversionList.Rda") # Loads dataframe called conversionList
labeledDF <- left_join(all_gexpr, conversionList, by = c("ensembl_id" = "ensembl_gene_id"))
relabeledDF <- labeledDF %>% select(external_gene_name, everything()) %>% slice(4:nrow(labeledDF))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
setwd("~/code/qPCR_FPKM")
# label gene names for each ensebl Ids to make sorting easier
load("~/code/qPCR_FPKM/FullconversionList.Rda") # Loads dataframe called conversionList
labeledDF <- left_join(all_gexpr, conversionList, by = c("ensembl_id" = "ensembl_gene_id"))
relabeledDF <- labeledDF %>% select(external_gene_name, everything()) %>% slice(4:nrow(labeledDF))
all_gexpr <- read.csv("all_gexpr_unfiltered.tsv", sep = "\t")
all_gexpr <- tibble::rownames_to_column(all_gexpr, var = "ensembl_id")
all_gexpr
# label gene names for each ensebl Ids to make sorting easier
load("~/code/qPCR_FPKM/FullconversionList.Rda") # Loads dataframe called conversionList
labeledDF <- left_join(all_gexpr, conversionList, by = c("ensembl_id" = "ensembl_gene_id"))
# label gene names for each ensebl Ids to make sorting easier
load("~/code/qPCR_FPKM/FullconversionList.Rda") # Loads dataframe called conversionList
labeledDF <- left_join(all_gexpr, FullConversionList, by = c("ensembl_id" = "ensembl_gene_id"))
relabeledDF <- labeledDF %>% select(external_gene_name, everything()) %>% slice(4:nrow(labeledDF))
View(labeledDF)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
setwd("~/code/qPCR_FPKM")
all_gexpr <- read.csv("all_gexpr_unfiltered.tsv", sep = "\t")
all_gexpr <- tibble::rownames_to_column(all_gexpr, var = "ensembl_id")
all_gexpr
# label gene names for each ensebl Ids to make sorting easier
load("~/code/qPCR_FPKM/FullconversionList.Rda") # Loads dataframe called conversionList
labeledDF <- left_join(all_gexpr, FullConversionList, by = c("ensembl_id" = "ensembl_gene_id"))
relabeledDF <- labeledDF %>% select(external_gene_name, everything()) %>% slice(4:nrow(labeledDF))
relabeledDF
# select genes of itnerest
gois <- c("Nnmt", "Nampt", "Nmnat1")
gois_FPKM <- relabeledDF %>% filter(external_gene_name %in% gois)
# following only works if no repeats in genes
gois_FPKM_T <- gois_FPKM %>% select(-X.NAME) %>%
gather(sample_id, valname, -external_gene_name) %>%
spread(external_gene_name, valname)
# select genes of itnerest
gois <- c("Nnmt", "Nampt", "Nmnat1")
gois_FPKM <- relabeledDF %>% filter(external_gene_name %in% gois)
# following only works if no repeats in genes
gois_FPKM_T <- gois_FPKM %>% select(-ensembl_id) %>%
gather(sample_id, valname, -external_gene_name) %>%
spread(external_gene_name, valname)
gois_FPKM_T
# add pdata to data frame so can sort and graph more easily
pdata <- read.csv("Vanc_pdata.csv")
labeled_gois_FPKM <- left_join(gois_FPKM_T, pdata, by = "sample_id")
labeled_gois_FPKM
?gsub
# select genes of itnerest
gois <- c("Nnmt", "Nampt", "Nmnat1")
gois_FPKM <- relabeledDF %>% filter(external_gene_name %in% gois)
# following only works if no repeats in genes
gois_FPKM_T <- gois_FPKM %>% select(-ensembl_id) %>%
gather(sample_id, valname, -external_gene_name) %>%
spread(external_gene_name, valname)
gois_FPKM_T
# delete "FPKM." from sample_id
gois_FPKM_final <- gsub("FPKM.", "", gois_FPKM_T)
gois_FPKM_final
# select genes of itnerest
gois <- c("Nnmt", "Nampt", "Nmnat1")
gois_FPKM <- relabeledDF %>% filter(external_gene_name %in% gois)
# following only works if no repeats in genes
gois_FPKM_T <- gois_FPKM %>% select(-ensembl_id) %>%
gather(sample_id, valname, -external_gene_name) %>%
spread(external_gene_name, valname)
gois_FPKM_T
# delete "FPKM." from sample_id
gois_FPKM_final <- as.data.frame(gsub("FPKM.", "", gois_FPKM_T))
gois_FPKM_final
# select genes of itnerest
gois <- c("Nnmt", "Nampt", "Nmnat1")
gois_FPKM <- relabeledDF %>% filter(external_gene_name %in% gois)
# following only works if no repeats in genes
gois_FPKM_T <- gois_FPKM %>% select(-ensembl_id) %>%
gather(sample_id, valname, -external_gene_name) %>%
spread(external_gene_name, valname)
gois_FPKM_T
# delete "FPKM." from sample_id
gois_FPKM_final <- sub("FPKM.", "", gois_FPKM_T)
gois_FPKM_final
# select genes of itnerest
gois <- c("Nnmt", "Nampt", "Nmnat1")
gois_FPKM <- relabeledDF %>% filter(external_gene_name %in% gois)
# following only works if no repeats in genes
gois_FPKM_T <- gois_FPKM %>% select(-ensembl_id) %>%
gather(sample_id, valname, -external_gene_name) %>%
spread(external_gene_name, valname)
# delete "FPKM." from sample_id
gsub("FPKM.", "", gois_FPKM_T)
gois_FPKM_T
# delete "FPKM." from sample_id
gois_FPKM_T$sample_id <- gsub("FPKM.", "", gois_FPKM_T$sample_id)
gois_FPKM_T
# add pdata to data frame so can sort and graph more easily
pdata <- read.csv("Vanc_pdata.csv")
labeled_gois_FPKM <- left_join(gois_FPKM_T, pdata, by = "sample_id")
labeled_gois_FPKM
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
setwd("~/code/qPCR_FPKM")
all_gexpr <- read.csv("all_gexpr_unfiltered.tsv", sep = "\t")
all_gexpr <- tibble::rownames_to_column(all_gexpr, var = "ensembl_id")
all_gexpr
# label gene names for each ensebl Ids to make sorting easier
load("~/code/qPCR_FPKM/FullconversionList.Rda") # Loads dataframe called conversionList
labeledDF <- left_join(all_gexpr, FullConversionList, by = c("ensembl_id" = "ensembl_gene_id"))
relabeledDF <- labeledDF %>% select(external_gene_name, everything()) %>% slice(4:nrow(labeledDF))
relabeledDF
# select genes of itnerest
gois <- c("Nnmt", "Nampt", "Nmnat1")
gois_FPKM <- relabeledDF %>% filter(external_gene_name %in% gois)
# following only works if no repeats in genes
gois_FPKM_T <- gois_FPKM %>% select(-ensembl_id) %>%
gather(sample_id, valname, -external_gene_name) %>%
spread(external_gene_name, valname)
# delete "FPKM." from sample_id
gois_FPKM_T$sample_id <- gsub("FPKM.", "", gois_FPKM_T$sample_id)
gois_FPKM_T
# add pdata to data frame so can sort and graph more easily
pdata <- read.csv("Vanc_pdata.csv")
labeled_gois_FPKM <- left_join(gois_FPKM_T, pdata, by = "sample_id")
labeled_gois_FPKM
View(all_gexpr)
View(relabeledDF)
View(relabeledDF)
View(pdata)
View(relabeledDF)
# select genes of itnerest
gois <- c("Nnmt", "Nampt", "Nmnat1", "Nmnat2", "Nmnat3", "Nrk1", "Nrk2", "Sirt1", "Cd38", "Ppar", "Mat1a", "Mat2a", "Mat2b", "Amd1", "Gnmt", "Gamt", "Pemt", "Mtr", "Mtrr", "Bhmt", "Ahcy", "Cbs", "Aox1", "Aox2", "Cyp2e1")
gois_FPKM <- relabeledDF %>% filter(external_gene_name %in% gois)
# following only works if no repeats in genes
gois_FPKM_T <- gois_FPKM %>% select(-ensembl_id) %>%
gather(sample_id, valname, -external_gene_name) %>%
spread(external_gene_name, valname)
# delete "FPKM." from sample_id
gois_FPKM_T$sample_id <- gsub("FPKM.", "", gois_FPKM_T$sample_id)
gois_FPKM_T
length(gois)
ncol(gois_FPKM_T)
# select genes of itnerest
gois <- c("Nnmt", "Nampt", "Nmnat1", "Nmnat2", "Nmnat3", "Nrk1", "Nrk2", "Sirt1", "Cd38", "Pparg", "Mat1a", "Mat2a", "Mat2b", "Amd1", "Gnmt", "Gamt", "Pemt", "Mtr", "Mtrr", "Bhmt", "Ahcy", "Cbs", "Aox1", "Aox2", "Cyp2e1")
gois_FPKM <- relabeledDF %>% filter(external_gene_name %in% gois)
# following only works if no repeats in genes
gois_FPKM_T <- gois_FPKM %>% select(-ensembl_id) %>%
gather(sample_id, valname, -external_gene_name) %>%
spread(external_gene_name, valname)
# delete "FPKM." from sample_id
gois_FPKM_T$sample_id <- gsub("FPKM.", "", gois_FPKM_T$sample_id)
gois_FPKM_T
ncol(gois_FPKM_T)
colnames(gois_FPKM_T)
colnamesT <- colnames(gois_FPKM_T)
colnamesT %!in% gois
colnamesT %ni% gois
colnamesT !%in% gois
%notin% <- Negate(%in%)
`%notin%` <- Negate(`%in%`)
colnamesT %notin% gois
gois %notin% colnamesT
absent <- gois %notin% colnamesT
gois[absent]
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggpubr)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggpubr)
setwd("~/code/qPCR_FPKM")
setwd("~/Documents/GitHub/RNAseq/qPCR_FPKM")
getwd()
green <- "#70AD46" # unaffecteds, no treatment
yellow <- "#FBBF07" # unaffecteds, vanc
blue <- "#4370C3" # affecteds, no treatment
orange <- "#ED7E2F" # affecteds, vanc
colors <- c(green, yellow, blue, orange)
all_gexpr <- read.csv("all_gexpr_unfiltered.tsv", sep = "\t")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggpubr)
setwd("~/code/qPCR_FPKM")
green <- "#70AD46" # unaffecteds, no treatment
yellow <- "#FBBF07" # unaffecteds, vanc
blue <- "#4370C3" # affecteds, no treatment
orange <- "#ED7E2F" # affecteds, vanc
colors <- c(green, yellow, blue, orange)
all_gexpr <- read.csv("all_gexpr_unfiltered.tsv", sep = "\t")
all_gexpr <- read.csv("~/code/qPCR_FPKM/all_gexpr_unfiltered.tsv", sep = "\t")
all_gexpr <- tibble::rownames_to_column(all_gexpr, var = "ensembl_id")
all_gexpr
# label gene names for each ensebl Ids to make sorting easier
load("~/code/qPCR_FPKM/FullconversionList.Rda") # Loads dataframe called conversionList
labeledDF <- left_join(all_gexpr, FullConversionList, by = c("ensembl_id" = "ensembl_gene_id"))
relabeledDF <- labeledDF %>% select(external_gene_name, everything()) %>% slice(4:nrow(labeledDF))
relabeledDF
# select genes of itnerest
gois <- c("Nnmt", "Nampt", "Nmnat1", "Nmnat2", "Nmnat3", "Nmrk1", "Nmrk2", "Sirt1", "Cd38", "Pparg", "Mat1a", "Mat2a", "Mat2b", "Amd1", "Gnmt", "Gamt", "Pemt", "Mtr", "Mtrr", "Bhmt", "Ahcy", "Cbs", "Aox1", "Aox2", "Cyp2e1", "Sirt2", "Sirt3", "Sirt4", "Sirt5", "Sirt6", "Sirt7", "Ppargc1a")
gois_FPKM <- relabeledDF %>% filter(external_gene_name %in% gois)
# following only works if no repeats in genes
gois_FPKM_T <- gois_FPKM %>% select(-ensembl_id) %>%
gather(sample_id, valname, -external_gene_name) %>%
spread(external_gene_name, valname)
# delete "FPKM." from sample_id
gois_FPKM_T$sample_id <- gsub("FPKM.", "", gois_FPKM_T$sample_id)
gois_FPKM_T
# put in long format so can loop in making graphs
gois_FPKM_long <- gois_FPKM_T %>% gather("gene", "FPKM", -sample_id)
# add pdata to data frame so can sort and graph more easily
pdata <- read.csv("~/code/qPCR_FPKM/Vanc_pdata.csv")
labeled_gois_FPKM <- left_join(gois_FPKM_long, pdata, by = "sample_id")
labeled_gois_FPKM
# reorder and rename groups for plots
labeled_gois_FPKM$group <- ordered(labeled_gois_FPKM$group, levels = c("Un_Sham", "Un_Vanc", "Af_Sh", "Af_Vanc"))
labeled_gois_FPKM
# calculate means and sd
Un_Sham = "Unaffecteds (+/-)\nNo Treatment\n(n=6)"
Un_Vanc = "Unaffecteds (+/-)\nVancomycin\n(n=6)"
Af_Sh = "Affecteds (-/-)\nNo Treatment\n(n=6)"
Af_Vanc = "Affecteds (-/-)\nVancomycin\n(n=6)"
my_comparisons <- list( c(Un_Sham, Af_Sh), c(Af_Sh, Af_Vanc), c(Un_Sham, Un_Vanc))
plot <- ggplot(filter(labeled_gois_FPKM, gene == "Nnmt"), aes(x=group, y = FPKM, fill=group)) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge") +
stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge", width = 0.2)  +
stat_compare_means()+ # global p value
stat_compare_means(label = "p.signif", method = "t.test", ref.group = Un_Sham, label.y = 60) +                 # Pairwise comparison against Unaffected, no treatment
stat_compare_means(comparisons = my_comparisons, label = "p.signif")+
theme_classic()+
scale_fill_manual(values=colors) +
ggtitle("Nnmt") +
theme(plot.title = element_text(hjust = 0.5, size=24))
plot
plot <- ggplot(filter(labeled_gois_FPKM, gene == "Nnmt"), aes(x=group, y = FPKM, fill=group)) +
theme_classic()+
scale_fill_manual(values=colors) +
ggtitle("Nnmt") +
theme(plot.title = element_text(hjust = 0.5, size=24))
plot
plot <- ggplot(filter(labeled_gois_FPKM, gene == "Nnmt"), aes(x=group, y = FPKM, fill=group))# +
# theme_classic()+
# scale_fill_manual(values=colors) +
# ggtitle("Nnmt") +
# theme(plot.title = element_text(hjust = 0.5, size=24))
plot
plot <- ggplot(filter(labeled_gois_FPKM, gene == "Nnmt"), aes(x=group, y = FPKM, fill=group)) +
geom_dotplot(binaxis='y', stackdir='center')+
theme_classic()+
scale_fill_manual(values=colors) +
ggtitle("Nnmt") +
theme(plot.title = element_text(hjust = 0.5, size=24))
plot
??fun.data
# define data_summary function to generate median, upper (Q3, 0.75) and lower (Q1, 0.25) ranges for error bars
data_summary <- function(x) {
m <- median(x)
ymin <- quantile(x, 0.25) # Q1 or lower quartile
ymax <- quantile(x, 0.75) # Q3 or upper quartile
return(c(y=m, ymin=ymin, ymax=ymax))
}
plot <- ggplot(filter(labeled_gois_FPKM, gene == "Nnmt"), aes(x=group, y = FPKM, fill=group)) +
geom_dotplot(binaxis='y', stackdir='center')+
stat_summary(fun.data=data_summary, color = "red")+
theme_classic()+
scale_fill_manual(values=colors) +
ggtitle("Nnmt") +
theme(plot.title = element_text(hjust = 0.5, size=24))
plot
plot <- ggplot(filter(labeled_gois_FPKM, gene == "Nnmt"), aes(x=group, y = FPKM, fill=group)) +
geom_dotplot(binaxis='y', stackdir='center')+
stat_summary()+
theme_classic()+
scale_fill_manual(values=colors) +
ggtitle("Nnmt") +
theme(plot.title = element_text(hjust = 0.5, size=24))
plot
# define data_summary function to generate median, upper (Q3, 0.75) and lower (Q1, 0.25) ranges for error bars
data_summary <- function(x) {
m <- median(x)
ymin <- quantile(x, 0.25) # Q1 or lower quartile
ymax <- quantile(x, 0.75) # Q3 or upper quartile
return(c(y=m, ymin=ymin, ymax=ymax))
}
plot <- ggplot(filter(labeled_gois_FPKM, gene == "Nnmt"), aes(x=group, y = FPKM, fill=group)) +
geom_dotplot(binaxis='y', stackdir='center')+
stat_summary(fun.data=data_summary, color = "red")+
theme_classic()+
scale_fill_manual(values=colors) +
ggtitle("Nnmt") +
theme(plot.title = element_text(hjust = 0.5, size=24))
plot
plot <- ggplot(filter(labeled_gois_FPKM, gene == "Nnmt"), aes(x=group, y = FPKM, fill=group)) +
geom_dotplot(binaxis='y', stackdir='center')+
stat_summary(fun.data=median_mad, color = "red")+
theme_classic()+
scale_fill_manual(values=colors) +
ggtitle("Nnmt") +
theme(plot.title = element_text(hjust = 0.5, size=24))
plot
plot <- ggplot(filter(labeled_gois_FPKM, gene == "Nnmt"), aes(x=group, y = FPKM, fill=group)) +
geom_dotplot(binaxis='y', stackdir='center')+
stat_summary(fun.data=median_mad, color = "black")+
theme_classic()+
scale_fill_manual(values=colors) +
ggtitle("Nnmt") +
theme(plot.title = element_text(hjust = 0.5, size=24))
plot
plot <- ggplot(filter(labeled_gois_FPKM, gene == "Nnmt"), aes(x=group, y = FPKM, fill=group)) +
geom_dotplot(binaxis='y', stackdir='center')+
stat_summary(fun.data=median_mad)+
theme_classic()+
scale_fill_manual(values=colors) +
ggtitle("Nnmt") +
theme(plot.title = element_text(hjust = 0.5, size=24))
plot
plot <- ggplot(filter(labeled_gois_FPKM, gene == "Nnmt"), aes(x=group, y = FPKM, fill=group)) +
geom_dotplot(binaxis='y', stackdir='center')+
stat_summary(fun.data=median_mad, size = 3)+
theme_classic()+
scale_fill_manual(values=colors) +
ggtitle("Nnmt") +
theme(plot.title = element_text(hjust = 0.5, size=24))
plot
plot <- ggplot(filter(labeled_gois_FPKM, gene == "Nnmt"), aes(x=group, y = FPKM, fill=group)) +
geom_dotplot(binaxis='y', stackdir='center')+
stat_summary(fun.data=median_mad)+
theme_classic()+
scale_fill_manual(values=colors) +
ggtitle("Nnmt") +
theme(plot.title = element_text(hjust = 0.5, size=24))
plot
??stat_summary
plot <- ggplot(filter(labeled_gois_FPKM, gene == "Nnmt"), aes(x=group, y = FPKM, fill=group)) +
geom_dotplot(binaxis='y', stackdir='center')+
stat_summary(fun.data=median_mad, size = 1)+
theme_classic()+
scale_fill_manual(values=colors) +
ggtitle("Nnmt") +
theme(plot.title = element_text(hjust = 0.5, size=24))
plot
plot <- ggplot(filter(labeled_gois_FPKM, gene == "Nnmt"), aes(x=group, y = FPKM, fill=group)) +
geom_dotplot(binaxis='y', stackdir='center')+
stat_summary(fun.data=median_mad, size = 0.05)+
theme_classic()+
scale_fill_manual(values=colors) +
ggtitle("Nnmt") +
theme(plot.title = element_text(hjust = 0.5, size=24))
plot
plot <- ggplot(filter(labeled_gois_FPKM, gene == "Nnmt"), aes(x=group, y = FPKM, fill=group)) +
geom_dotplot(binaxis='y', stackdir='center')+
stat_summary(fun.data=median_mad, size = 0.25)+
theme_classic()+
scale_fill_manual(values=colors) +
ggtitle("Nnmt") +
theme(plot.title = element_text(hjust = 0.5, size=24))
plot
